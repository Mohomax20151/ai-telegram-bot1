import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, FSInputFile,
    ReplyKeyboardMarkup, KeyboardButton, Message
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup

BOT_TOKEN = "8094761598:AAFDmaV_qAKTim2YnkuN8ksQFvwNxds7HLQ"
ADMIN_ID = 6688088575
CATEGORIES = ['football', 'hockey', 'dota', 'cs', 'tennis']

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

class UploadState(StatesGroup):
    waiting_photo = State()
    waiting_category = State()

class IntroState(StatesGroup):
    intro_shown = State()

def generate_categories_keyboard(user_forecasts):
    keyboard = []
    for sport in CATEGORIES:
        count = len(user_forecasts.get(sport, []))
        callback_data = f"buy_{sport}" if count > 0 else "none"
        text = f"{sport.capitalize()} ‚Äî {count}"
        keyboard.append([InlineKeyboardButton(text=text, callback_data=callback_data)])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def admin_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[ 
        [InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data="admin_upload")],
        [InlineKeyboardButton(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥–Ω–æ–∑–æ–≤", callback_data="admin_view")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã", callback_data="admin_clear")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])

def bottom_keyboard(user_id):
    buttons = [[KeyboardButton(text="üîÆ AI –ø—Ä–æ–≥–Ω–æ–∑—ã")]]
    if user_id == ADMIN_ID:
        buttons.append([KeyboardButton(text="–ê–¥–º–∏–Ω")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

@dp.message(Command("start"))
async def start_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("intro_done"):
        await bot.send_chat_action(message.chat.id, action="upload_video")
        await message.answer_video(
            video="BAACAgIAAxkBAAIBCGhdn70oSM1KnFvcGOvOjuQ50P2TAAJ4gAACKGXwSjSGuqbploX4NgQ",
            caption=( 
                "üé• <b>–ü–æ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞</b>, –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –≤—ã–ø—É—â–µ–Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ <b>—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –≤–∏–¥–µ–æ –æ—Ç AI</b>\n"
                "üìä <b>–ù–∞ –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è:</b> 71% –ø–æ–±–µ–¥, —Å—Ä–µ–¥–Ω–∏–π –∫—ç—Ñ ‚Äî 1.78\n"
                "üß† <b>–ü—Ä–æ–≥–Ω–æ–∑—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –Ω–∞ –±–∞–∑–µ AI</b>, –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 07:00\n"
                "üëá <b>–ñ–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≥–Ω–æ–∑—ã AI¬ª –∏ –ø–æ–ª—É—á–∏ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑</b>"
            )
        )
        await message.answer(
            "üí° <b>–í –ø—Ä–æ—à–ª–æ–º —É–∂–µ –±—ã–ª —É—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å AI-–≤–∏–ª–∫–∞–º–∏</b>, –Ω–æ –æ–Ω –±—ã–ª –∑–∞–∫—Ä—ã—Ç\n"
            "üîê <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b> –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏\n"
            "üìâ <b>–ü—Ä–∏–±—ã–ª—å —Å–µ–π—á–∞—Å</b> ‚Äî —Å—Ç–∞–±–∏–ª—å–Ω–∞—è, —Ü–µ–ª—å: —Ä–æ—Å—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–±–µ–¥\n\n"

            "<b>‚öôÔ∏è –ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å–µ–π—á–∞—Å:</b>\n"
            "ü§ñ AI:\n"
            "‚Äî üìö –°–∫–∞–Ω–∏—Ä—É–µ—Ç —Å–æ—Ç–Ω–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤\n"
            "‚Äî üìä –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç—Ä–µ–Ω–¥—ã, –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã\n"
            "‚Äî üß† –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è value-–ø—Ä–æ–≥–Ω–æ–∑–æ–≤\n\n"

            "<b>üöÄ –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –≤ –±—É–¥—É—â–µ–º:</b>\n"
            "üìà –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ç–æ—á–Ω–æ—Å—Ç–∏\n"
            "üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞\n"
            "üß© –†–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –≤–Ω—É—Ç—Ä–∏ –±–æ—Ç–∞"
        )

        keyboard = InlineKeyboardMarkup(inline_keyboard=[ 
            [InlineKeyboardButton(text="üîÆ AI –ø—Ä–æ–≥–Ω–æ–∑—ã", callback_data="start_predictions")]
        ])
        await message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:", reply_markup=keyboard)
        await state.update_data(intro_done=True)
        return

    await full_start(message, state)

@dp.callback_query(lambda c: c.data == "start_predictions")
async def handle_intro_button(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await full_start(callback.message, state)

async def full_start(message: Message, state: FSMContext):
    data = await state.get_data()
    user_forecasts = data.get("user_forecasts")

    if not user_forecasts:
        user_forecasts = {}
        for sport in CATEGORIES:
            folder = f"forecasts/{sport}"
            try:
                files = [f for f in os.listdir(folder) if f.lower().endswith((".png", ".jpg", ".jpeg"))]
            except FileNotFoundError:
                files = []
            user_forecasts[sport] = files.copy()
        await state.update_data(user_forecasts=user_forecasts)

    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞:", 
                         reply_markup=generate_categories_keyboard(user_forecasts))
    await message.answer("ü¶Ö", reply_markup=bottom_keyboard(message.from_user.id))

@dp.message(lambda m: m.text == "üîÆ AI –ø—Ä–æ–≥–Ω–æ–∑—ã")
async def bottom_start(message: Message, state: FSMContext):
    await full_start(message, state)

@dp.message(lambda m: m.text == "–ê–¥–º–∏–Ω")
async def bottom_admin(message: Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=admin_menu_keyboard())

@dp.callback_query(lambda c: c.data == "admin_upload")
async def admin_upload(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UploadState.waiting_photo)
    await callback.message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ")

@dp.message(UploadState.waiting_photo)
async def receive_photo(message: Message, state: FSMContext):
    if not message.photo:
        await message.answer("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Ñ–æ—Ç–æ.")
        return

    file_id = message.photo[-1].file_id
    await state.update_data(photo_id=file_id)
    await state.set_state(UploadState.waiting_category)

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[ 
            [InlineKeyboardButton(text=sport.capitalize(), callback_data=f"save_to_{sport}")] 
            for sport in CATEGORIES
        ]
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data.startswith("save_to_"))
async def save_forecast(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    photo_id = data.get("photo_id")
    sport = callback.data.replace("save_to_", "")

    folder = f"forecasts/{sport}"
    os.makedirs(folder, exist_ok=True)
    files = os.listdir(folder)
    file_name = f"{len(files) + 1}.jpg"

    file = await bot.get_file(photo_id)
    file_path = file.file_path
    await bot.download_file(file_path, os.path.join(folder, file_name))

    await callback.message.answer(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {sport.capitalize()}")
    await state.clear()

@dp.callback_query(lambda c: c.data == "admin_view")
async def view_forecasts(callback: CallbackQuery):
    report = ""
    for sport in CATEGORIES:
        folder = f"forecasts/{sport}"
        try:
            count = len([f for f in os.listdir(folder) if f.lower().endswith((".png", ".jpg", ".jpeg"))])
        except FileNotFoundError:
            count = 0
        report += f"{sport.capitalize()}: {count} —à—Ç.\n"
    await callback.message.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:\n\n{report}")

@dp.callback_query(lambda c: c.data == "admin_clear")
async def clear_forecasts(callback: CallbackQuery):
    for sport in CATEGORIES:
        folder = f"forecasts/{sport}"
        if os.path.exists(folder):
            for f in os.listdir(folder):
                os.remove(os.path.join(folder, f))
    await callback.message.answer("üóë –í—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã –æ—á–∏—â–µ–Ω—ã.")

@dp.callback_query(lambda c: c.data == "back_to_start")
async def go_back(callback: CallbackQuery, state: FSMContext):
    await full_start(callback.message, state)

@dp.callback_query()
async def process_payment_choice(callback: CallbackQuery, state: FSMContext):
    if callback.data == "none":
        await callback.answer("–ü—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç üòû", show_alert=True)
        return

    sport = callback.data.replace("buy_", "")
    data = await state.get_data()
    user_forecasts = data.get("user_forecasts", {})

    files = user_forecasts.get(sport, [])
    if not files:
        await callback.answer("–ü—Ä–æ–≥–Ω–æ–∑—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üòû", show_alert=True)
        return

    file_name = files.pop(0)
    file_path = os.path.join(f"forecasts/{sport}", file_name)
    photo = FSInputFile(file_path)

    emoji = "‚öΩÔ∏è" if sport == "football" else "üèí" if sport == "hockey" else "üéÆ"
    await callback.message.answer_photo(photo, caption=f"{sport.capitalize()} {emoji}")

    user_forecasts[sport] = files
    await state.update_data(user_forecasts=user_forecasts)

    try:
        await callback.message.edit_reply_markup(reply_markup=generate_categories_keyboard(user_forecasts))
    except Exception:
        pass

    await callback.answer()

@dp.message(lambda message: message.video)
async def get_video_file_id(message: Message):
    await message.answer(f"<b>file_id:</b> <code>{message.video.file_id}</code>")

async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT
    port = int(os.environ.get('PORT', 10000))  # –ü–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 10000
    await dp.start_polling(bot)

if __name__ == "__main__":
    port = int(os.environ.get('PORT', 10000))  # 10000 ‚Äî —ç—Ç–æ –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    executor.start_polling(dp, skip_updates=True)
    asyncio.run(main())
