import os
import logging
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup,
    Message, KeyboardButton, ReplyKeyboardMarkup, CallbackQuery, ContentType
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiohttp import web

# ‚Äî‚Äî‚Äî –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚Äî‚Äî‚Äî
BOT_TOKEN   = os.getenv("BOT_TOKEN", "8094761598:AAFDmaV_qAKTim2YnkuN8ksQFvwNxds7HLQ")
ADMIN_ID    = int(os.getenv("ADMIN_ID", "6688088575"))
CATEGORIES  = ['football', 'hockey', 'dota', 'cs', 'tennis']
WEBHOOK_HOST= os.getenv("WEBHOOK_HOST", "https://ai-telegram-bot1.onrender.com")
WEBHOOK_PATH= f"/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
PORT        = int(os.getenv("PORT", "10000"))

# ‚Äî‚Äî‚Äî –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî‚Äî‚Äî
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚Äî‚Äî‚Äî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ‚Äî‚Äî‚Äî
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp  = Dispatcher(storage=MemoryStorage())

# ‚Äî‚Äî‚Äî FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî‚Äî‚Äî
class UploadState(StatesGroup):
    waiting_photo    = State()
    waiting_category = State()

class IntroState(StatesGroup):
    intro_shown = State()

# ‚Äî‚Äî‚Äî –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚Äî‚Äî‚Äî
def generate_categories_keyboard(user_forecasts: dict) -> InlineKeyboardMarkup:
    kb = []
    for sport in CATEGORIES:
        count = len(user_forecasts.get(sport, []))
        cb = f"buy_{sport}" if count else "none"
        kb.append([InlineKeyboardButton(f"{sport.capitalize()} ‚Äî {count}", callback_data=cb)])
    return InlineKeyboardMarkup(inline_keyboard=kb)

def admin_menu_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data="admin_upload")],
        [InlineKeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥–Ω–æ–∑–æ–≤", callback_data="admin_view")],
        [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã", callback_data="admin_clear")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")],
    ])

def bottom_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    buttons = [[KeyboardButton("üîÆ AI –ø—Ä–æ–≥–Ω–æ–∑—ã")]]
    if user_id == ADMIN_ID:
        buttons.append([KeyboardButton("–ê–¥–º–∏–Ω")])  # –ö–Ω–æ–ø–∫–∞ "–ê–¥–º–∏–Ω"
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# ‚Äî‚Äî‚Äî –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start ‚Äî‚Äî‚Äî
@dp.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("intro_done"):
        await bot.send_chat_action(message.chat.id, action="upload_video")
        await message.answer_video(
            video="BAACAgIAAxkBAAIBCGhdn70oSM1KnFvcGOvOjuQ50P2TAAJ4gAACKGXwSjSGuqbploX4NgQ",
            caption=(
                "üé• <b>–ü–æ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞</b>, –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –≤—ã–ø—É—â–µ–Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ <b>—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –≤–∏–¥–µ–æ –æ—Ç AI</b>\n"
                "üìä <b>–ù–∞ –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è:</b> 71% –ø–æ–±–µ–¥, —Å—Ä–µ–¥–Ω–∏–π –∫—ç—Ñ ‚Äî 1.78\n"
                "üß† <b>–ü—Ä–æ–≥–Ω–æ–∑—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –Ω–∞ –±–∞–∑–µ AI</b>, –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 07:00\n"
                "üëá <b>–ñ–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≥–Ω–æ–∑—ã AI¬ª –∏ –ø–æ–ª—É—á–∏ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑</b>"
            )
        )
        await message.answer(
            "üí° <b>–í –ø—Ä–æ—à–ª–æ–º —É–∂–µ –±—ã–ª —É—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å AI-–≤–∏–ª–∫–∞–º–∏</b>, –Ω–æ –æ–Ω –±—ã–ª –∑–∞–∫—Ä—ã—Ç\n"
            "üîê <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b> –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ\n"
            "üìâ <b>–ü—Ä–∏–±—ã–ª—å —Ç–µ–∫—É—â–∞—è:</b> —Å—Ç–∞–±–∏–ª—å–Ω–∞—è, —Ü–µ–ª—å: —Ä–æ—Å—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–±–µ–¥\n\n"
            "‚öôÔ∏è <b>–°–µ–π—á–∞—Å</b>: AI —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã\n"
            "üöÄ <b>–í –±—É–¥—É—â–µ–º</b>: –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"
        )
        await message.answer(
            "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton("üîÆ AI –ø—Ä–æ–≥–Ω–æ–∑—ã", callback_data="start_predictions")]]
            )
        )
        await state.update_data(intro_done=True)
        return
    await full_start(message, state)

# ‚Äî‚Äî‚Äî –ü–æ–ª–Ω—ã–π —Å—Ç–∞—Ä—Ç (–ø–æ—Å–ª–µ –∏–Ω—Ç—Ä–æ) ‚Äî‚Äî‚Äî
async def full_start(message: Message, state: FSMContext):
    data = await state.get_data()
    user_forecasts = data.get("user_forecasts")
    if user_forecasts is None:
        user_forecasts = {}
        for sport in CATEGORIES:
            folder = f"forecasts/{sport}"
            try:
                files = [f for f in os.listdir(folder) if f.lower().endswith((".png","jpg","jpeg"))]
            except FileNotFoundError:
                files = []
            user_forecasts[sport] = files
        await state.update_data(user_forecasts=user_forecasts)

    await message.answer(
        "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞:",
        reply_markup=generate_categories_keyboard(user_forecasts)
    )
    await message.answer("ü¶Ö", reply_markup=bottom_keyboard(message.from_user.id))

# ‚Äî‚Äî‚Äî –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ ¬´–ê–¥–º–∏–Ω¬ª ‚Äî‚Äî‚Äî
@dp.message(lambda m: m.text == "–ê–¥–º–∏–Ω")
async def admin_menu_handler(message: Message):
    logger.info(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –∞–¥–º–∏–Ω-–º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=admin_menu_keyboard())

# ‚Äî‚Äî‚Äî –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback‚Äô–æ–≤ –∞–¥–º–∏–Ω—Å–∫–æ–≥–æ –º–µ–Ω—é ‚Äî‚Äî‚Äî
@dp.callback_query()
async def admin_callback_handler(callback_query: CallbackQuery):
    logger.info(f"Callback data: {callback_query.data}")
    data = callback_query.data
    if data == "admin_upload":
        await callback_query.message.answer("üì§ –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞...")
        # –ù–∞—á–∞–ª–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ
        await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏.")
        await UploadState.waiting_photo.set()
    elif data == "admin_view":
        await callback_query.message.answer("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥–Ω–æ–∑–æ–≤...")
    elif data == "admin_clear":
        await callback_query.message.answer("üóë –ü—Ä–æ–≥–Ω–æ–∑—ã –æ—á–∏—â–µ–Ω—ã...")
    elif data == "back_to_start":
        await callback_query.message.answer("üîô –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª–æ...")
    await callback_query.answer()

# ‚Äî‚Äî‚Äî –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ ‚Äî‚Äî‚Äî
@dp.message(content_types=ContentType.PHOTO, state=UploadState.waiting_photo)
async def handle_photo_upload(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –≤ –ø–∞–ø–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä, /forecasts
    file_id = message.photo[-1].file_id
    file = await bot.get_file(file_id)
    await bot.download_file(file.file_path, f"forecasts/{file.file_path.split('/')[-1]}")
    await message.answer("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ!")
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# ‚Äî‚Äî‚Äî –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –∏ –ø—Ä–æ—á.) ‚Äî‚Äî‚Äî
@dp.message()
async def general_handler(message: Message):
    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID {message.message_id} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    await message.answer("–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! ‚úÖ")

# ‚Äî‚Äî‚Äî Webhook handlers ‚Äî‚Äî‚Äî
async def on_start(request):
    return web.Response(text="Bot is running")

async def on_webhook(request):
    try:
        data = await request.json()
        update = Update.model_validate(data, context={"bot": bot})
        await dp.feed_update(bot, update)
    except Exception as e:
        logger.error(f"Webhook handling error: {e}")
    return web.Response()

# ‚Äî‚Äî‚Äî –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ‚Äî‚Äî‚Äî
async def on_app_startup(app):
    info = await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook set: {info}")

# ‚Äî‚Äî‚Äî –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Äî‚Äî‚Äî
app = web.Application()
app.add_routes([
    web.post(WEBHOOK_PATH, on_webhook),
    web.get("/", on_start),
])
app.on_startup.append(on_app_startup)

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=PORT)
