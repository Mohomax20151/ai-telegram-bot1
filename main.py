import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, FSInputFile,
    ReplyKeyboardMarkup, KeyboardButton, Message
)
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup

BOT_TOKEN = "8094761598:AAFDmaV_qAKTim2YnkuN8ksQFvwNxds7HLQ"
ADMIN_ID = 6688088575
CATEGORIES = ['football', 'hockey', 'dota', 'cs', 'tennis']

bot = Bot(token=BOT_TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher(storage=MemoryStorage())

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
class UploadState(StatesGroup):
    waiting_photo = State()
    waiting_category = State()
    waiting_text = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞

class IntroState(StatesGroup):
    intro_shown = State()

def generate_categories_keyboard(user_forecasts):
    keyboard = []
    for sport in CATEGORIES:
        count = len(user_forecasts.get(sport, []))
        callback_data = f"buy_{sport}" if count > 0 else "none"
        text = f"{sport.capitalize()} ‚Äî {count}"
        keyboard.append([InlineKeyboardButton(text=text, callback_data=callback_data)])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def admin_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data="admin_upload")],
        [InlineKeyboardButton(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥–Ω–æ–∑–æ–≤", callback_data="admin_view")],
        [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã", callback_data="admin_clear")],
        [InlineKeyboardButton(text="üìú –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º", callback_data="admin_upload_text")],  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–º
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])

def bottom_keyboard(user_id):
    buttons = [[KeyboardButton(text="üîÆ AI –ø—Ä–æ–≥–Ω–æ–∑—ã")]]
    buttons.append([KeyboardButton(text="üìú –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã —Ç–µ–∫—Å—Ç–æ–º")])  # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    if user_id == ADMIN_ID:
        buttons.append([KeyboardButton(text="–ê–¥–º–∏–Ω")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

@dp.callback_query(lambda c: c.data == "admin_upload")
async def admin_upload(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UploadState.waiting_photo)
    await callback.message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –≤ –≤–∏–¥–µ —Ñ–æ—Ç–æ")

# –ù–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
@dp.callback_query(lambda c: c.data == "admin_upload_text")
async def admin_upload_text(callback: CallbackQuery, state: FSMContext):
    await state.set_state(UploadState.waiting_text)
    await callback.message.answer("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")

@dp.message(UploadState.waiting_text)
async def receive_text(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –¥—Ä—É–≥–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ
    text = message.text
    # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –ë–î, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    async with SessionLocal() as session:
        text_forecast = TextForecast(text=text)
        session.add(text_forecast)
        await session.commit()

    await message.answer("‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —Ç–µ–∫—Å—Ç–æ–º –∑–∞–≥—Ä—É–∂–µ–Ω!")
    await state.clear()

@dp.callback_query(lambda c: c.data == "admin_view")
async def view_forecasts(callback: CallbackQuery):
    report = ""
    for sport in CATEGORIES:
        folder = f"forecasts/{sport}"
        try:
            count = len([f for f in os.listdir(folder) if f.lower().endswith((".png", ".jpg", ".jpeg"))])
        except FileNotFoundError:
            count = 0
        report += f"{sport.capitalize()}: {count} —à—Ç.\n"
    await callback.message.answer(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:\n\n{report}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞
@dp.message(lambda message: message.text == "üìú –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã —Ç–µ–∫—Å—Ç–æ–º")
async def show_text_forecasts(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with SessionLocal() as session:
        result = await session.execute(
            TextForecast.__table__.select()
        )
        forecast = result.scalars().all()

    if forecast:
        for text in forecast:
            await message.answer(f"üìú –ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n{text.text}")
    else:
        await message.answer("‚ùó –ü—Ä–æ–≥–Ω–æ–∑–æ–≤ —Ç–µ–∫—Å—Ç–æ–º –Ω–µ—Ç.")

@dp.callback_query(lambda c: c.data == "admin_clear")
async def clear_forecasts(callback: CallbackQuery):
    # –û—á–∏—â–∞–µ–º –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –ø—Ä–æ–≥–Ω–æ–∑—ã
    for sport in CATEGORIES:
        folder = f"forecasts/{sport}"
        if os.path.exists(folder):
            for f in os.listdir(folder):
                os.remove(os.path.join(folder, f))
    
    # –û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    async with SessionLocal() as session:
        await session.execute(TextForecast.__table__.delete())
        await session.commit()

    await callback.message.answer("üóë –í—Å–µ –ø—Ä–æ–≥–Ω–æ–∑—ã (—Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è) –æ—á–∏—â–µ–Ω—ã.")

@dp.callback_query()
async def process_payment_choice(callback: CallbackQuery, state: FSMContext):
    if callback.data == "none":
        await callback.answer("–ü—Ä–æ–≥–Ω–æ–∑–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç üòû", show_alert=True)
        return

    sport = callback.data.replace("buy_", "")
    data = await state.get_data()
    user_forecasts = data.get("user_forecasts", {})

    files = user_forecasts.get(sport, [])
    if not files:
        await callback.answer("–ü—Ä–æ–≥–Ω–æ–∑—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å üòû", show_alert=True)
        return

    file_name = files.pop(0)
    file_path = os.path.join(f"forecasts/{sport}", file_name)
    photo = FSInputFile(file_path)

    emoji = "‚öΩÔ∏è" if sport == "football" else "üèí" if sport == "hockey" else "üéÆ" if sport == "dota" else "üéÆ" if sport == "cs" else "üéæ"
    await callback.message.answer_photo(photo, caption=f"{sport.capitalize()} {emoji}")

    user_forecasts[sport] = files
    await state.update_data(user_forecasts=user_forecasts)

    try:
        await callback.message.edit_reply_markup(reply_markup=generate_categories_keyboard(user_forecasts))
    except Exception:
        pass

    await callback.answer()

async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
