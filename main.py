import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging

logging.basicConfig(level=logging.INFO)

BOT_TOKEN = "8094761598:AAFDmaV_qAKTim2YnkuN8ksQFvwNxds7HLQ"
ADMIN_ID = 6688088575
CATEGORIES = ['football', 'hockey', 'dota', 'cs', 'tennis']

bot = Bot(token=BOT_TOKEN, parse_mode="HTML")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

class UploadState(StatesGroup):
    waiting_photo = State()
    waiting_category = State()

@dp.message_handler(commands=['start'])
async def start_handler(message: types.Message, state: FSMContext):
    await state.update_data(received_forecasts={sport: [] for sport in CATEGORIES})
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÆ AI –ø—Ä–æ–≥–Ω–æ–∑—ã", callback_data="start_predictions")]
    ])
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "start_predictions")
async def show_categories(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    data = await state.get_data()
    received = data.get("received_forecasts", {sport: [] for sport in CATEGORIES})

    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ø–æ—Ä—Ç–∞ —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ
    categories_data = {}
    for sport in CATEGORIES:
        folder = f"forecasts/{sport}"
        try:
            all_files = [f for f in os.listdir(folder) if f.lower().endswith(('.jpg', '.png', '.jpeg'))]
        except FileNotFoundError:
            all_files = []
        # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        available_files = [f for f in all_files if f not in received.get(sport, [])]
        categories_data[sport] = available_files

    # –°–æ—Ö—Ä–∞–Ω–∏–º –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ—á–∏—Ç—ã–≤–∞—Ç—å
    await state.update_data(categories_data=categories_data, received_forecasts=received)

    keyboard = generate_categories_keyboard(categories_data)
    await callback.message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=keyboard)

def generate_categories_keyboard(categories_data):
    keyboard = []
    for sport in CATEGORIES:
        count = len(categories_data.get(sport, []))
        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤, –∫–Ω–æ–ø–∫–∞ —Å callback_data = 'none', —á—Ç–æ–±—ã –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
        callback_data = f"sport_{sport}" if count > 0 else "none"
        text = f"{sport.capitalize()} ‚Äî {count}"
        keyboard.append([InlineKeyboardButton(text=text, callback_data=callback_data)])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.callback_query_handler(lambda c: c.data.startswith("sport_"))
async def send_forecast(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    sport = callback.data.replace("sport_", "")
    data = await state.get_data()
    categories_data = data.get("categories_data", {})
    received = data.get("received_forecasts", {})

    available_files = categories_data.get(sport, [])
    if not available_files:
        await callback.message.answer(f"–ü—Ä–æ–≥–Ω–æ–∑—ã –ø–æ {sport.capitalize()} –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.")
        return

    next_file = available_files[0]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    file_path = os.path.join("forecasts", sport, next_file)
    try:
        with open(file_path, 'rb') as photo:
            await bot.send_photo(callback.message.chat.id, photo, caption=f"–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ {sport.capitalize()}")
    except Exception as e:
        await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–∫–∏ ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ
    received.setdefault(sport, []).append(next_file)
    categories_data[sport].pop(0)

    await state.update_data(categories_data=categories_data, received_forecasts=received)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–≤—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    keyboard = generate_categories_keyboard(categories_data)
    await callback.message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=keyboard)

@dp.message_handler(lambda m: m.text == "üîÆ AI –ø—Ä–æ–≥–Ω–æ–∑—ã")
async def ai_forecasts_handler(message: types.Message, state: FSMContext):
    data = await state.get_data()
    received = data.get("received_forecasts", {sport: [] for sport in CATEGORIES})

    categories_data = {}
    for sport in CATEGORIES:
        folder = f"forecasts/{sport}"
        try:
            all_files = [f for f in os.listdir(folder) if f.lower().endswith(('.jpg', '.png', '.jpeg'))]
        except FileNotFoundError:
            all_files = []
        available_files = [f for f in all_files if f not in received.get(sport, [])]
        categories_data[sport] = available_files

    await state.update_data(categories_data=categories_data)
    keyboard = generate_categories_keyboard(categories_data)

    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞:", reply_markup=keyboard)

@dp.message_handler(lambda m: m.text == "–ê–¥–º–∏–Ω")
async def bottom_admin(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data="admin_upload")],
            [InlineKeyboardButton(text="üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥–Ω–æ–∑–æ–≤", callback_data="admin_view")],
            [InlineKeyboardButton(text="üóë –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã", callback_data="admin_clear")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
        ])
        await message.answer("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == "back_to_start")
async def back_to_start_callback(callback: types.CallbackQuery):
    await callback.answer()
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("üîÆ AI –ø—Ä–æ–≥–Ω–æ–∑—ã"))
    await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –Ω–∞—á–∞–ª–æ", reply_markup=keyboard)

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    executor.start_polling(dp, skip_updates=True)
