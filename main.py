import os
import logging
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.types import Update, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery, Message, KeyboardButton, ReplyKeyboardMarkup
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiohttp import web

# ‚Äî‚Äî‚Äî –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ‚Äî‚Äî‚Äî
BOT_TOKEN = "8094761598:AAFDmaV_qAKTim2YnkuN8ksQFvwNxds7HLQ"
ADMIN_ID = 6688088575
CATEGORIES = ['football', 'hockey', 'dota', 'cs', 'tennis']

# —Å–æ–∑–¥–∞—ë–º Bot —Å –≥–ª–æ–±–∞–ª—å–Ω—ã–º HTML parse_mode
bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher(storage=MemoryStorage())

# Webhook URL
WEBHOOK_HOST = "https://ai-telegram-bot1.onrender.com"
WEBHOOK_PATH = f"/{BOT_TOKEN}"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

# –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚Äî‚Äî‚Äî –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM ‚Äî‚Äî‚Äî
class UploadState(StatesGroup):
    waiting_photo = State()
    waiting_category = State()

class IntroState(StatesGroup):
    intro_shown = State()

# ‚Äî‚Äî‚Äî –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä ‚Äî‚Äî‚Äî
def generate_categories_keyboard(user_forecasts):
    keyboard = []
    for sport in CATEGORIES:
        count = len(user_forecasts.get(sport, []))
        callback_data = f"buy_{sport}" if count > 0 else "none"
        text = f"{sport.capitalize()} ‚Äî {count}"
        keyboard.append([InlineKeyboardButton(text=text, callback_data=callback_data)])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def admin_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton("üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", callback_data="admin_upload")],
        [InlineKeyboardButton("üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥–Ω–æ–∑–æ–≤", callback_data="admin_view")],
        [InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã", callback_data="admin_clear")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ])

def bottom_keyboard(user_id):
    buttons = [[KeyboardButton("üîÆ AI –ø—Ä–æ–≥–Ω–æ–∑—ã")]]
    if user_id == ADMIN_ID:
        buttons.append([KeyboardButton("–ê–¥–º–∏–Ω")])
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

# ‚Äî‚Äî‚Äî –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ‚Äî‚Äî‚Äî
@dp.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("intro_done"):
        await bot.send_chat_action(message.chat.id, action="upload_video")
        await message.answer_video(
            video="BAACAgIAAxkBAAIBCGhdn70oSM1KnFvcGOvOjuQ50P2TAAJ4gAACKGXwSjSGuqbploX4NgQ",
            caption=(
                "üé• <b>–ü–æ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞</b>, –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –≤—ã–ø—É—â–µ–Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ <b>—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –≤–∏–¥–µ–æ –æ—Ç AI</b>\n"
                "üìä <b>–ù–∞ –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è:</b> 71% –ø–æ–±–µ–¥, —Å—Ä–µ–¥–Ω–∏–π –∫—ç—Ñ ‚Äî 1.78\n"
                "üß† <b>–ü—Ä–æ–≥–Ω–æ–∑—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –Ω–∞ –±–∞–∑–µ AI</b>, –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 07:00\n"
                "üëá <b>–ñ–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≥–Ω–æ–∑—ã AI¬ª –∏ –ø–æ–ª—É—á–∏ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑</b>"
            )
        )
        await message.answer(
            "üí° <b>–í –ø—Ä–æ—à–ª–æ–º —É–∂–µ –±—ã–ª —É—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å AI-–≤–∏–ª–∫–∞–º–∏</b>, –Ω–æ –æ–Ω –±—ã–ª –∑–∞–∫—Ä—ã—Ç\n"
            "üîê <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b> –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ\n"
            "üìâ <b>–ü—Ä–∏–±—ã–ª—å —Ç–µ–∫—É—â–∞—è:</b> —Å—Ç–∞–±–∏–ª—å–Ω–∞—è, —Ü–µ–ª—å: —Ä–æ—Å—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–±–µ–¥\n\n"
            "<b>‚öôÔ∏è –°–µ–π—á–∞—Å:</b>\n"
            "ü§ñ AI —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏\n"
            "<b>üöÄ –í –±—É–¥—É—â–µ–º:</b> –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"
        )
        await message.answer(
            "–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton("üîÆ AI –ø—Ä–æ–≥–Ω–æ–∑—ã", callback_data="start_predictions")]]
            )
        )
        await state.update_data(intro_done=True)
        return

    await full_start(message, state)

# ‚Äî‚Äî‚Äî Webhook Handlers ‚Äî‚Äî‚Äî
async def on_start(request):
    return web.Response(text="Bot is running")

async def on_webhook(request):
    try:
        json_str = await request.json()
        # –ø–µ—Ä–µ–¥–∞—ë–º bot –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        update = Update.model_validate(json_str, context={"bot": bot})
        # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–µ
        await dp.feed_update(update)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
    return web.Response()

async def set_webhook():
    info = await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook set: {info}")

# ‚Äî‚Äî‚Äî –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∏ –±–æ—Ç–∞ ‚Äî‚Äî‚Äî
app = web.Application()
app.add_routes([
    web.post(WEBHOOK_PATH, on_webhook),
    web.get('/', on_start),
])

async def main():
    logger.info("ü§ñ Starting bot")
    await set_webhook()
    web.run_app(app, host="0.0.0.0", port=int(os.environ.get("PORT", 10000)))

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
