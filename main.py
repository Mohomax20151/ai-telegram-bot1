import os
import logging
import asyncio
import asyncpg
import databases
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Update,
    Message,
    CallbackQuery,
    FSInputFile,
)
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiohttp import web

# ‚Äî‚Äî‚Äî –¢–µ–∫—Å—Ç–æ–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑ (–≥–ª–æ–±–∞–ª—å–Ω–æ) ‚Äî‚Äî‚Äî
TEXT_FORECAST: str = ""

# ‚Äî‚Äî‚Äî –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL ‚Äî‚Äî‚Äî
DATABASE_URL = os.getenv("DATABASE_URL", "postgresql://username:password@localhost/dbname")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ
database = databases.Database(DATABASE_URL)

# Aliases –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
from aiogram.types import (
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    ReplyKeyboardMarkup,
    KeyboardButton,
)

# ‚Äî‚Äî‚Äî –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ‚Äî‚Äî‚Äî
BOT_TOKEN    = os.getenv("BOT_TOKEN",    "8094761598:AAFDmaV_qAKTim2YnkuN8ksQFvwNxds7HLQ")
ADMIN_ID     = int(os.getenv("ADMIN_ID", "6688088575"))
CATEGORIES   = ['football', 'hockey', 'dota', 'cs', 'tennis']
WEBHOOK_HOST = os.getenv("WEBHOOK_HOST", "https://ai-telegram-bot1.onrender.com")
WEBHOOK_PATH = f"/{BOT_TOKEN}"
WEBHOOK_URL  = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"
PORT         = int(os.getenv("PORT", "10000"))

# ‚Äî‚Äî‚Äî –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî‚Äî‚Äî
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚Äî‚Äî‚Äî –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ‚Äî‚Äî‚Äî
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp  = Dispatcher(storage=MemoryStorage())

# ‚Äî‚Äî‚Äî FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è ‚Äî‚Äî‚Äî
class UploadState(StatesGroup):
    waiting_photo    = State()
    waiting_category = State()
    waiting_text     = State()  # –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–µ–∫—Å—Ç–∞

# ‚Äî‚Äî‚Äî –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ‚Äî‚Äî‚Äî
def generate_categories_keyboard(user_forecasts: dict) -> InlineKeyboardMarkup:
    emoji_map = {
        'football': '‚öΩÔ∏è',
        'hockey'  : 'üèí',
        'dota'    : 'üéÆ',
        'cs'      : 'üî´',
        'tennis'  : 'üéæ',
    }
    kb = []
    for sport in CATEGORIES:
        count = len(user_forecasts.get(sport, []))
        cb = f"buy_{sport}" if count else "none"
        label = f"{emoji_map[sport]} {sport.capitalize()} ‚Äî {count}"
        kb.append([{"text": label, "callback_data": cb}])
    return InlineKeyboardMarkup.model_validate({"inline_keyboard": kb})

def admin_menu_keyboard() -> InlineKeyboardMarkup:
    kb = [
        [{"text": "üì§ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑", "callback_data": "admin_upload"}],
        [{"text": "üìä –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–≥–Ω–æ–∑–æ–≤", "callback_data": "admin_view"}],
        [{"text": "üóë –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã", "callback_data": "admin_clear"}],
        [{"text": "üìù –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º", "callback_data": "admin_upload_text"}],  # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞
        [{"text": "üîô –ù–∞–∑–∞–¥", "callback_data": "back_to_start"}],
    ]
    return InlineKeyboardMarkup.model_validate({"inline_keyboard": kb})

def bottom_keyboard(user_id: int) -> ReplyKeyboardMarkup:
    kb = [[{"text": "üîÆ AI –ø—Ä–æ–≥–Ω–æ–∑—ã"}]]
    if user_id == ADMIN_ID:
        kb.append([{"text": "–ê–¥–º–∏–Ω"}])
    kb.append([{"text": "üìù –ü—Ä–æ–≥–Ω–æ–∑—ã —Ç–µ–∫—Å—Ç–æ–º"}])  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
    return ReplyKeyboardMarkup.model_validate({
        "keyboard": kb,
        "resize_keyboard": True
    })

# ‚Äî‚Äî‚Äî –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (PostgreSQL) ‚Äî‚Äî‚Äî
async def connect_db():
    await database.connect()
    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")

async def disconnect_db():
    await database.disconnect()
    logger.info("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ.")

# ‚Äî‚Äî‚Äî –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ ‚Äî‚Äî‚Äî
async def create_forecasts_table():
    query = """
    CREATE TABLE IF NOT EXISTS forecasts (
        id SERIAL PRIMARY KEY,
        sport VARCHAR(50) NOT NULL,
        file_name VARCHAR(255) NOT NULL,
        file_path TEXT NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    """
    await database.execute(query)

# ‚Äî‚Äî‚Äî –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ‚Äî‚Äî‚Äî
async def save_forecast_to_db(sport: str, file_name: str, file_path: str):
    query = """
    INSERT INTO forecasts (sport, file_name, file_path)
    VALUES (:sport, :file_name, :file_path)
    """
    await database.execute(query, values={"sport": sport, "file_name": file_name, "file_path": file_path})

# ‚Äî‚Äî‚Äî –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ‚Äî‚Äî‚Äî
async def get_forecasts_from_db():
    query = "SELECT sport, file_name, file_path FROM forecasts"
    return await database.fetch_all(query)

# ‚Äî‚Äî‚Äî /start ‚Äî‚Äî‚Äî
@dp.message(Command("start"))
async def start_handler(message: Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("intro_done"):
        await bot.send_chat_action(message.chat.id, action="upload_video")
        await message.answer_video(
            video="BAACAgIAAxkBAAIBCGhdn70oSM1KnFvcGOvOjuQ50P2TAAJ4gAACKGXwSjSGuqbploX4NgQ",
            caption=( 
                "üé• <b>–ü–æ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –ø—Ä–æ–µ–∫—Ç–∞</b>, –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç –≤—ã–ø—É—â–µ–Ω–æ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ <b>—Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ –≤–∏–¥–µ–æ –æ—Ç AI</b>\n"
                "üìä <b>–ù–∞ –º–æ–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω–∏—è:</b> 71% –ø–æ–±–µ–¥, —Å—Ä–µ–¥–Ω–∏–π –∫—ç—Ñ ‚Äî 1.78\n"
                "üß† <b>–ü—Ä–æ–≥–Ω–æ–∑—ã —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –Ω–∞ –±–∞–∑–µ AI</b>, –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 07:00\n"
                "üëá <b>–ñ–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≥–Ω–æ–∑—ã AI¬ª –∏ –ø–æ–ª—É—á–∏ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –ø—Ä–æ–≥–Ω–æ–∑</b>"
            )
        )
        await message.answer(
            "üí° <b>–í –ø—Ä–æ—à–ª–æ–º —É–∂–µ –±—ã–ª —É—Å–ø–µ—à–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å AI-–≤–∏–ª–∫–∞–º–∏</b>, –Ω–æ –æ–Ω –±—ã–ª –∑–∞–∫—Ä—ã—Ç\n"
            "üîê <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤</b> –±—É–¥–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ\n"
            "üìâ <b>–ü—Ä–∏–±—ã–ª—å —Ç–µ–∫—É—â–∞—è:</b> —Å—Ç–∞–±–∏–ª—å–Ω–∞—è, —Ü–µ–ª—å: —Ä–æ—Å—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ–±–µ–¥\n\n"
            "‚öôÔ∏è <b>–°–µ–π—á–∞—Å</b>: AI —Å–∫–∞–Ω–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã\n"
            "üöÄ <b>–í –±—É–¥—É—â–µ–º</b>: –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"
        )
        # –ö–Ω–æ–ø–∫–∞ "üîÆ AI –ø—Ä–æ–≥–Ω–æ–∑—ã"
        ikm = InlineKeyboardMarkup.model_validate({
            "inline_keyboard": [
                [{"text": "üîÆ AI –ø—Ä–æ–≥–Ω–æ–∑—ã", "callback_data": "start_predictions"}]
            ]
        })
        await message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª –ø—Ä–æ–≥–Ω–æ–∑–æ–≤:", reply_markup=ikm)
        await state.update_data(intro_done=True)
        return

    await full_start(message, state)

# ‚Äî‚Äî‚Äî Inline "AI –ø—Ä–æ–≥–Ω–æ–∑—ã" ‚Äî‚Äî‚Äî
@dp.callback_query(F.data == "start_predictions")
async def handle_intro_button(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await full_start(callback.message, state)

# ‚Äî‚Äî‚Äî –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö ‚Äî‚Äî‚Äî
async def full_start(message: Message, state: FSMContext):
    data = await state.get_data()
    user_forecasts = await get_forecasts_from_db()

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ
    forecasts = {}
    for sport in CATEGORIES:
        forecasts[sport] = []
    for forecast in user_forecasts:
        forecasts[forecast["sport"]].append(forecast)

    await message.answer("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ø–æ—Ä—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞:",
                         reply_markup=generate_categories_keyboard(forecasts))
    await message.answer("ü¶Ö", reply_markup=bottom_keyboard(message.from_user.id))

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞ –¥–∏—Å–∫
@dp.message(F.photo, StateFilter(UploadState.waiting_photo))
async def handle_photo_upload(message: Message, state: FSMContext):
    await state.update_data(photo_id=message.photo[-1].file_id)
    await state.set_state(UploadState.waiting_category)
    kb = [
        [{"text": s.capitalize(), "callback_data": f"save_to_{s}"}]
        for s in CATEGORIES
    ]
    ikm = InlineKeyboardMarkup.model_validate({"inline_keyboard": kb})
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:", reply_markup=ikm)

@dp.callback_query(F.data.startswith("save_to_"), StateFilter(UploadState.waiting_category))
async def save_to_category(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    photo_id = data.get("photo_id")
    sport = callback.data.replace("save_to_", "")
    folder = f"forecasts/{sport}"
    os.makedirs(folder, exist_ok=True)
    files = [f for f in os.listdir(folder) if f.lower().endswith((".png","jpg","jpeg"))]
    file_name = f"{len(files)+1}.jpg"
    file = await bot.get_file(photo_id)
    await bot.download_file(file.file_path, os.path.join(folder, file_name))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    file_path = os.path.join(folder, file_name)
    await save_forecast_to_db(sport, file_name, file_path)
    
    await callback.answer()
    await callback.message.answer(f"‚úÖ –ü—Ä–æ–≥–Ω–æ–∑ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {sport.capitalize()}")
    await state.clear()

# ‚Äî‚Äî‚Äî Fallback ‚Äî‚Äî‚Äî
@dp.message()
async def general_handler(message: Message):
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ {message.message_id} –æ—Ç {message.from_user.id}")
    await message.answer("–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! ‚úÖ")

# ‚Äî‚Äî‚Äî Webhook ‚Äî‚Äî‚Äî
async def on_start(request):
    return web.Response(text="Bot is running")

async def on_webhook(request):
    data = await request.json()
    update = Update(**data)
    await dp.feed_update(bot, update)
    return web.Response()

async def on_app_startup(app):
    info = await bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook set: {info}")

app = web.Application()
app.add_routes([ 
    web.post(WEBHOOK_PATH, on_webhook),
    web.get("/", on_start),
])
app.on_startup.append(on_app_startup)

if __name__ == "__main__":
    web.run_app(app, host="0.0.0.0", port=PORT)

